***********CODE***********


import java.util.*;
class Binary_Search_Recursive
{
    public static void main()
    {
        Scanner ob=new Scanner(System.in);
        System.out.println("ENTER THE NUMBER OF ELEMENTS IN THE ARRAY");
        int n=ob.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            System.out.print("ENTER ELEMENT "+(i+1)+": ");
            arr[i]=ob.nextInt();
        }
        /*System.out.println("BEFORE");
        for(int i=0;i<n;i++)
        {
            System.out.print(arr[i]+"   ");
        }*/
        Arrays.sort(arr);
        /*System.out.println("AFTER");
        for(int i=0;i<n;i++)
        {
            System.out.print(arr[i]+"   ");
        }*/
        System.out.println("ENTER ELEMENT TO BE FOUND");
        int find=ob.nextInt();
        int result=binary(arr,0,arr.length-1,find);
        if(result==-1)
        {
            System.out.println("NOT PRESENT");
        }
        else
        {
            System.out.println("PRESENT AT INDEX(AFTER SORTING):  "+result);
        }
    }
    public static int binary(int arr[],int i,int l,int find)
    {
        if(i==l)
        {
            if(arr[i]==find)
            {
                return i;
            }
            else
            {
                return -1;
            }
        }
        else
        {
            int mid=(i+l)/2;
            if(arr[mid]==find)
            {
                return mid;
            }
            else if(arr[mid]<find)
            {
                return binary(arr,mid+1,l,find);
            }
            else 
            {
                return binary(arr,i,mid-1,find);
            }
        }
    }
}




***********ALGORITHM***********


function binarySearchRecursive(arr, target, low, high):
    if low <= high:
        mid = (low + high) / 2

        if arr[mid] == target:
            return mid     // Element found, return its index
        else if arr[mid] < target:
            return binarySearchRecursive(arr, target, mid + 1, high)  // Target is in the right half of the array
        else:
            return binarySearchRecursive(arr, target, low, mid - 1)   // Target is in the left half of the array

    return -1            // Element not found
